# В результате 10 независимых измерений некоторой величины X, выполненных с одинаковой точностью,
# получены опытные данные:
# 6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1
# Предполагая, что результаты измерений подчинены нормальному закону распределения вероятностей,
# оценить истинное значение величины X при помощи доверительного интервала, покрывающего это
# значение с доверительной вероятностью 0,95.

# так как нет сигма генеральной совокупности используем формулу Стьюдента
# и в силу малого объема выборки несмещенное среднее квадратич-е отклонение
import math as mt
import numpy as np
import scipy.stats as ss

n = 10
dataset = [6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1]
a = 0.05

# найдем среднее мат ожидание для выборки
Mn = np.mean(dataset)
print(f" среднее мат ожидание для выборки Mn = {Mn:.3f}")
"""
среднее мат ожидание для выборки Mn = 6.590
"""

# теперь найдем среднее несмещенное квадратическое отклонение
# 1-й способ
sigma_nesm = np.std(dataset, ddof=1)
print(f"среднее несмещенное квадратическое отклонение sigma_nesm = {sigma_nesm:.3f}")
"""
среднее несмещенное квадратическое отклонение sigma_nesm = 0.451
"""
# 2-й способ через дисперсию
sigma_nesm = mt.sqrt(np.var(dataset, ddof=1))
print(f"среднее несмещенное квадратическое отклонение sigma_nesm = {sigma_nesm:.3f}")
"""
среднее несмещенное квадратическое отклонение sigma_nesm = 0.451
"""

# найдем t критерий Стьюдента со степенью свободы df = n - 1 (можно по таблице)
t_val = ss.t.ppf(1-0.025, 10-1)
print(f't критерий {t_val:.3f}')
"""
t критерий 2.262
"""

# находим доверительный интервал
dov_interval_min = Mn - t_val * sigma_nesm / mt.sqrt(n)
dov_interval_max = Mn + t_val * sigma_nesm / mt.sqrt(n)
print(f'доверительный интервал от {dov_interval_min:.3f}  до {dov_interval_max:.3f}')
"""
доверительный интервал от 6.268  до 6.912
Т. о. с надежностью 0,95 истинное значение измеряемой величины Х
заключено в доверительном интервале от 6.268  до 6.912
"""
