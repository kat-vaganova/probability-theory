# Посчитать коэффициент линейной регрессии при заработной плате (zp),
# используя градиентный спуск (без intercept).


import numpy as np

x = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
y = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
# количество наблюдений
n = len(x)
alpha = 1e-6
b1 = 0.1


def mse_(b1, y, x, n):
    return np.sum((b1 * x - y) ** 2) / n


for i in range(2000):
    b1 -= alpha * (2/n)*np.sum((b1 * x - y) * x)
    if i%200==0:
        print(f'It: {i}, b1={b1},mse={mse_(b1,  y, x, n)}')

"""
It: 0, b1=0.25952808,mse=493237.7212546963
It: 200, b1=5.868748638669329,mse=56522.97550129376
It: 400, b1=5.8897415574471985,mse=56516.85850140053
It: 600, b1=5.889820124983314,mse=56516.85841572062
It: 800, b1=5.88982041902807,mse=56516.8584157194
It: 1000, b1=5.8898204201285544,mse=56516.85841571941
It: 1200, b1=5.889820420132673,mse=56516.85841571943
It: 1400, b1=5.889820420132673,mse=56516.85841571943
It: 1600, b1=5.889820420132673,mse=56516.85841571943
It: 1800, b1=5.889820420132673,mse=56516.85841571943

в первой задаче коэффициент линейной регрессии [[5.88982042]] что соответствует настоящему решению
"""
