# Даны значения величины заработной платы заемщиков банка (zp)
# и значения их поведенческого кредитного скоринга (ks):
# zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110],
# ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
# Используя математические операции, посчитать коэффициенты линейной регрессии,
# приняв за X заработную плату (то есть, zp - признак),
# а за y - значения скорингового балла (то есть, ks - целевая переменная).
# Произвести расчет как с использованием intercept, так и без.

import numpy as np

x = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
y = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
# количество наблюдений
n = len(x)

# расчет с использованием intercept

# находим коэффициенты регрессии:
b = (np.mean(x * y) - np.mean(x) * np.mean(y)) / (np.mean(x**2) - np.mean(x) ** 2)
print(f'коэффициент регрессии b:  {b}')
"""
коэффициент регрессии b:  2.620538882402765
"""
a = np.mean(y) - b * np.mean(x)
print(f'коэффициент регрессии a:  {a}')
"""
коэффициент регрессии a:  444.1773573243596
"""

# уравнение регрессии:
y_hat = 444.18 + 2.62 * x
print(f'y:  {y_hat}')

"""
y:  [535.88 562.08 941.98 968.18 548.98 627.58 585.66 837.18 758.58 732.38]
"""

# расчет БЕЗ использования intercept (матричный метод)

x = x.reshape((n, 1))
print(x)
"""
[[ 35]
 [ 45]
 [190]
 [200]
 [ 40]
 [ 70]
 [ 54]
 [150]
 [120]
 [110]]
"""
y = y.reshape((n, 1))
print(y)
"""
[[401]
 [574]
 [874]
 [919]
 [459]
 [739]
 [653]
 [902]
 [746]
 [832]]
"""

b_hat = np.dot(np.linalg.inv(np.dot(x.T, x)), x.T@y)
print(f'коэффициент регрессии {b_hat}')
"""
коэффициент регрессии [[5.88982042]]
"""